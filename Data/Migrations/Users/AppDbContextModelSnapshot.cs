// <auto-generated />
using System;
using ArtWebshop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ArtWebshop.Migrations.AppDb
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ArtWebshop.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BillingCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingStreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryStreetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "060a402b-43c6-469c-af49-36a41b2c77bd",
                            AccessFailedCount = 0,
                            BillingCity = "Göteborg",
                            BillingCountry = "Sverige",
                            BillingPostalCode = "12345",
                            BillingStreetName = "Hemadress 1",
                            ConcurrencyStamp = "00adf4a7-adaf-4a18-aa30-cb019dae327d",
                            Email = "admin@site.com",
                            EmailConfirmed = true,
                            FirstName = "TestUserAdmin",
                            LastName = "SuperUser",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SITE.COM",
                            NormalizedUserName = "ADMIN@SITE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBNz2ebHPh04+5qW9+X2DPkdzQacOD81LdgxDdqiRHhn/75MbPwe9IogRTmzQfa+Tw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1e9e478-5668-4176-ab57-45ea3985f75b",
                            TwoFactorEnabled = false,
                            UserName = "admin@site.com"
                        },
                        new
                        {
                            Id = "465c189e-7a16-4af1-ad9e-76c28722ea37",
                            AccessFailedCount = 0,
                            BillingCity = "Göteborg",
                            BillingCountry = "Sverige",
                            BillingPostalCode = "12345",
                            BillingStreetName = "Hemadress 1",
                            ConcurrencyStamp = "f6994745-8970-4ed7-802f-871e12dca47a",
                            Email = "vendor@site.com",
                            EmailConfirmed = true,
                            FirstName = "TestUserVendor",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "VENDOR@SITE.COM",
                            NormalizedUserName = "VENDOR@SITE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIHJfUacyUWWpUn7KXvE3Gi7+W//hMH3Q86qrBiAs55lcGmcDJkMK483vT9Qnag+iw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3ece2149-773a-4404-b4e7-7a3046eda6e2",
                            TwoFactorEnabled = false,
                            UserName = "vendor@site.com"
                        },
                        new
                        {
                            Id = "49585b30-cb45-4cf0-ab02-e31a8c4191de",
                            AccessFailedCount = 0,
                            BillingCity = "Göteborg",
                            BillingCountry = "Sverige",
                            BillingPostalCode = "12345",
                            BillingStreetName = "Hemadress 1",
                            ConcurrencyStamp = "8c35aae3-303e-4fe1-a347-83d723b48126",
                            Email = "customer@site.com",
                            EmailConfirmed = true,
                            FirstName = "TestUserCustomer",
                            LastName = "Buy",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@SITE.COM",
                            NormalizedUserName = "CUSTOMER@SITE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECqMieUW+soQuCpgs80LBy/Mel1PYLyUrF6+PaBhLb6DtrxRInMpvAmZa9XPn5rUew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a54b542-adc1-4092-84cb-c3075e81524e",
                            TwoFactorEnabled = false,
                            UserName = "customer@site.com"
                        },
                        new
                        {
                            Id = "17836307-79e8-43e7-8c1d-8274525055be",
                            AccessFailedCount = 0,
                            BillingCity = "Göteborg",
                            BillingCountry = "Sverige",
                            BillingPostalCode = "12345",
                            BillingStreetName = "Hemadress 1",
                            ConcurrencyStamp = "8a52a03e-a6cd-4529-b682-5fd9752d72c9",
                            Email = "artist@site.com",
                            EmailConfirmed = true,
                            FirstName = "TestUserArtist",
                            LastName = "Upload",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARTIST@SITE.COM",
                            NormalizedUserName = "ARTIST@SITE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENYFHeZT4yR8UC5OSsJhSt2aI8G80YI5XHUG53oY0qzxPgg+7r+aj9+O9idFJmQw1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "90f1781a-16fc-4862-9d3b-4aae6f4f22a7",
                            TwoFactorEnabled = false,
                            UserName = "artist@site.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "c910a42b-7118-4e32-aedc-754127b64d81",
                            ConcurrencyStamp = "c910a42b-7118-4e32-aedc-754127b64d81",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "fb7e6262-e0bf-4b92-a3bd-d2071e8ba0d8",
                            ConcurrencyStamp = "fb7e6262-e0bf-4b92-a3bd-d2071e8ba0d8",
                            Name = "Vendor",
                            NormalizedName = "VENDOR"
                        },
                        new
                        {
                            Id = "9da0294f-e19a-4f1b-88d5-280b0a6766f3",
                            ConcurrencyStamp = "9da0294f-e19a-4f1b-88d5-280b0a6766f3",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "3b74a90b-02f6-450c-900c-bc524f912dd3",
                            ConcurrencyStamp = "3b74a90b-02f6-450c-900c-bc524f912dd3",
                            Name = "Artist",
                            NormalizedName = "ARTIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "060a402b-43c6-469c-af49-36a41b2c77bd",
                            RoleId = "c910a42b-7118-4e32-aedc-754127b64d81"
                        },
                        new
                        {
                            UserId = "465c189e-7a16-4af1-ad9e-76c28722ea37",
                            RoleId = "fb7e6262-e0bf-4b92-a3bd-d2071e8ba0d8"
                        },
                        new
                        {
                            UserId = "49585b30-cb45-4cf0-ab02-e31a8c4191de",
                            RoleId = "9da0294f-e19a-4f1b-88d5-280b0a6766f3"
                        },
                        new
                        {
                            UserId = "17836307-79e8-43e7-8c1d-8274525055be",
                            RoleId = "3b74a90b-02f6-450c-900c-bc524f912dd3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ArtWebshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ArtWebshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtWebshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ArtWebshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
